% make_ini.sl 
% A tool to set up non-standard extensions (modes and tools)for jed. 
% Creates a file ini.sl that declares all (public) functions
% in the current directory. Also bytecompiles the files if set to do so.
% 
% Still experimental, use at your own risk
% 
% TODO: Consider preprocessor options (How?)
%
% by Guenter Milde <g.milde@web.de>

% debug information
_debug_info = 1;
_traceback=1;

autoload("get_word", "txtutils.sl");

% --- Settings -----------------------------------------------------------
% TODO make these customizable: Maybe better use a hook than custom-variables

% Comment the ini-file
static variable verbose = 2;  % 0 no comments,
       			      % 1 global comments + list of custom variables,
                              % 2 one line/function,
			      % 3 full comments

% Bytecompile the files as well
static variable bytecompile = 0;

% Exclusion list
static variable Make_Ini_Exclusion_List = 
  ["ini.sl", "circle.sl", "cuamark.sl", "cuamouse.sl", "defaults.sl",
   "keydefs.sl", "mode_cmd.sl", "numbuf.sl", "walk.sl"];

% valid chars in function and variable definitions
static variable Slang_word = "A-Za-z0-9_";

% --- functions ---------------------------------------------------

% find out if the array arr contains value (the full version is in cuamisc.sl)
static define array_value_exists (arr, value)
{
   variable element;
   foreach (arr) 
     {
	element = ();
	if (element == value)
	    return (1);
     }
   return (0);
}


% searches for function definitions and adds autoload commands for theese
define look_for_functions()
{
   variable fun, str = "";
   push_spot();
   bob;
   % global comment
   if (verbose)
     loop(verbose)  % take as many lines as verbose indicates
       if (looking_at("%"))
	 {
	    push_mark();
	    go_down_1();
	    str += bufsubstr();
	 }
   % list custom variables (assuming the definition starts at bol)
   if (verbose)
     while (bol_fsearch("custom_variable"))
       {
	  push_mark_eol();
	  str += "% " + bufsubstr() + "\n";
       }
   bob;
   % explicitly public definitions
   while (bol_fsearch("public define "))
     {
	skip_word; skip_word;
	fun = get_word(Slang_word);
	str += "declare_fun(\"" + fun + "\", \""
	       			       + whatbuf() + "\");\n";
     }
   bob;
   % "normal" (i.e. unspecified) definitions
   while (bol_fsearch("define "))
     {
	skip_word;
	fun = get_word(Slang_word);
	str += "declare_fun(\"" + fun + "\", \""
	       			       + whatbuf() + "\");\n";
     }
   pop_spot();
   sw2buf("ini.sl");
   insert(str);
}

% searches all files in the current buffers dir
% defined functions are written to ini.sl
define make_ini() % ([directory= buffer_dir])
{
   % get optional argument
   variable dir;
   if (_NARGS)
     dir = ();
   else
     {
	(, dir, , ) = getbuf_info (); % default
	dir = read_mini("Library dir:", "", dir);
     }
   () = chdir(dir);

   sw2buf("ini.sl");
   erase_buffer();
   slang_mode();
   erase_buffer;
   insert("% ini.sl initialization file for the library dir " + dir + "\n" +
	  "% automatically generated by make_ini([dir])\n\n" +
	  "% declare a function (autoload + add_completion)\n" +
	  "define declare_fun (fun, where_from)\n" +
          "{\n" +
	  "   autoload (fun, where_from);\n" +
	  "   add_completion (fun);\n" +
	  "}\n");

   variable file, is_open;
   % get and sort files
   variable files = listdir(dir);
   files = files[array_sort(files)];  % array as index returns array of values
   
   foreach (files)
     {
	file = ();
	% show(file, file_type(file), file_status(file));
	% Skip files that are  no slang-source or unaccessible
	if ( file_type(file) != "sl" or file_status(file) != 1)
	  continue;

	if(bytecompile)
	  byte_compile_file (file, 0);
	
	% Skip files from the exclusion list
	if (array_value_exists(Make_Ini_Exclusion_List, file))
	  continue;
	
	sw2buf("ini.sl");     % use setbuf, if not want to see ini.sl
	insert("\n% " + file + "\n");
	is_open = bufferp(file);
	() = read_file(file);
	% show("processing", whatbuf());
	look_for_functions(); % ... and insert autoloads for them
	!if (is_open)     % don't close buffers that were already open
	  delbuf(file);
     }
}
